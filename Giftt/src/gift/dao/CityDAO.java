package gift.dao;

import gift.factory.HibernateUtil;
import gift.model.City;

import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * City DAO
 * Interacts with database.
 * Implemented for academic purposes.
 * 
 * @author Loiane Groner
 * http://loianegroner.com (English)
 * http://loiane.com (Portuguese)
 */
public class CityDAO {


	/**
	 * Inserts a row in the City table.
	 * Do not need to pass the id, it will be generated.
	 * @param cityName 
	 * @return id generated by the database
	 */
	public Long saveCity(String cityName)
	{
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction transaction = null;
		Long cityId = null;
		try {
			transaction = session.beginTransaction();
			City city = new City();
			city.setName(cityName);
			cityId = (Long) session.save(city);
			transaction.commit();
		} catch (HibernateException e) {
			transaction.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
		return cityId;
	}

	/**
	 * List all the cities from the database
	 */
	@SuppressWarnings("unchecked")
	public void listCities()
	{
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction transaction = null;
		try {
			transaction = session.beginTransaction();
			List<City> cities = session.createQuery("from City").list();

			for (City city : cities){
				System.out.println(city.getName());
			}

			transaction.commit();
		} catch (HibernateException e) {
			transaction.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
	}

	/**
	 * Upate a city in the database
	 * @param cityId id of the city to be updated
	 * @param cityName name of the "new" city
	 */
	public void updateCity(Long cityId, String cityName)
	{
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction transaction = null;
		try {
			transaction = session.beginTransaction();
			City city = (City) session.get(City.class, cityId);
			city.setName(cityName);
			transaction.commit();
		} catch (HibernateException e) {
			transaction.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
	}

	/**
	 * Delete a city from database
	 * @param cityId id of the city to be deleted
	 */
	public void deleteCity(Long cityId)
	{
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction transaction = null;
		try {
			transaction = session.beginTransaction();
			City city = (City) session.get(City.class, cityId);
			session.delete(city);
			transaction.commit();
		} catch (HibernateException e) {
			transaction.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
	}
}